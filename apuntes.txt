Node soporta las FEATURES de ECMAScritp, a la fehca ECMAScript 2015 (ES6) y Node v9.2.0, que son soportadas
por el motor V8 que este utiliza (https://nodejs.org/en/docs/es6/).
No está soportado la modularización a través de la notacion "import" y "from" que propone ES6, para esto
se tiene que usar la libreria Babel.
ES6 también introduce el concepto de calses.

Endpoints: metodo (verbo) + URL

Procesos y threads:

Cada vez que ejecuto node un proceso se crea para albergar esta intancia, puedo tener
varios. También un mismo proceso puede albergar 2 servidores web en 2 puertos distintos, o dos procesos
distintos de node pueden albergar un servidor (o mas tamién) siempre en puertos distintos:

node src/server/index.js

app.listen(3000, function () {
  console.log('Servidor iniciado con Express en el puerto 3000')
})

app.listen(3001, function () {
   console.log('Servidor iniciado con Express en el puerto 3001')
})
    

node src/server/index2.js

app.listen(3002, function () {
  console.log('Servidor iniciado con Express en el puerto 3001')
})

Babel y Browserify

    Del lado del Frontend:

        En un primer momento Babel se utiliza como un transform para Browserify en la parte de Frontend,
        lo que se hace el anter de que Browserify haga lo suyo el código se transforma utilizando Babel de
        ES6 a ES5.

    Del lado del Backend:

        Nececitamos otro modulo de Babel llamado babel-cli (command line interface)

        babel-preset-es2015 esta como dev dependecy, esto quiere decir que se instala solo en el ambiente de desarrollo
        y en dependecies se ponen los modulos que van a ir en el ambiente de produccion.
        En el caso de esta dependencia queremos que este en dependencies porque siempre lo vamos a nececitar, pueseto que 
        ahora Babel va a ser nuestro runtime en lugar de node, en realidad el Runtime de Babel funciona sobre node pero lo que
        hace primero es transformar el codigo de ES6 a ES5 y luego se lo pasa al Runtime de NodeJS.

        Si lo instalamos local podemos correr para correr el repl (runtime) de babel:
            $ babl-node
        Si lo instalamos solo local hacemos:
            $ node_modules/babel-cli/bin/babel-node.js
        Si queremos correr nuestro nodo con el server web:
            $ node_modules/babel-cli/bin/babel-node.js sr/server

        Cuando Babel paso de la versión 5 a la 6 cambiaron algunas cosas y debo pasar el presert para ES5 si quiero usar toda la sitanxys de ES6

            $ node_modules/babel-cli/bin/babel-node.js sr/server --presets es2015
                
            Windows:
            
            $ node node_modules/babel-cli/bin/babel-node.js sr/server --presets es2015

Middlewares:

    Son modulos que estan en el medio, en el medio del request que recibe express y la funcion en la que termino devolviendo info de vuelta al cliente.
    Es una forma de reutilizar funciones o rutinas de código entre distintos endpoints.

    Con app.use() implemento middlewares. como primer parametro es la url que quiero matchear en el request y como segundo
    una funcion que recibe 3 parametros el request el response y "next" que a su vez es otro midleware, el siguiente. 
    El orden es importante, los middleware se van ejecutando en el orden que en el que están en el código.

    Són utiles para procesar los request de forma global y reutilizar esos preprocesamientos en varios lugar o que se ejecten para un grupo o todos
    los request. Estos se pueden encadenar secuencialemnte, para esto es el parámetro (que es una funcion) next (next())
    

